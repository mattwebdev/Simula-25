{
  "name": "Simula 25",
  "scopeName": "source.simula",
  "fileTypes": ["simula"],
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#simulation"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [{
        "name": "keyword.control.simula",
        "match": "\\b(if|else|while|for|return|break|continue|when|otherwise|repeat|until|do|end)\\b"
      }, {
        "name": "keyword.other.simula",
        "match": "\\b(class|struct|enum|interface|type|fn|let|mut|const|pub|impl|import|export|module|use|as|in|ref|move|copy|borrow|static|dynamic|virtual|override|abstract|final|sealed|trait|where|match|case|default|yield|async|await|spawn|sync|lock|unlock|try|catch|throw|raise|finally|defer|guard|assert|debug|test|bench|doc|inline|unsafe|extern|crate|super|self|Self)\\b"
      }]
    },
    "comments": {
      "patterns": [{
        "name": "comment.line.double-slash.simula",
        "match": "//.*$"
      }, {
        "name": "comment.block.simula",
        "begin": "/\\*",
        "end": "\\*/",
        "patterns": [{
          "name": "comment.block.simula",
          "match": "."
        }]
      }, {
        "name": "comment.documentation.simula",
        "begin": "///",
        "end": "$",
        "patterns": [{
          "name": "comment.documentation.simula",
          "match": "."
        }]
      }]
    },
    "strings": {
      "patterns": [{
        "name": "string.quoted.double.simula",
        "begin": "\"",
        "end": "\"",
        "patterns": [{
          "name": "constant.character.escape.simula",
          "match": "\\\\."
        }, {
          "name": "string.interpolated.simula",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [{
            "include": "source.simula"
          }]
        }]
      }, {
        "name": "string.quoted.single.simula",
        "begin": "'",
        "end": "'",
        "patterns": [{
          "name": "constant.character.escape.simula",
          "match": "\\\\."
        }]
      }]
    },
    "numbers": {
      "patterns": [{
        "name": "constant.numeric.integer.simula",
        "match": "\\b(0[xX][0-9a-fA-F]+|0[bB][01]+|0[oO][0-7]+|\\d+)\\b"
      }, {
        "name": "constant.numeric.float.simula",
        "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
      }]
    },
    "types": {
      "patterns": [{
        "name": "storage.type.primitive.simula",
        "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|bool|char|str|void|never)\\b"
      }, {
        "name": "storage.type.complex.simula",
        "match": "\\b(Vec|Map|Set|Option|Result|Box|Rc|Arc|Mutex|RwLock|Channel|Future|Stream|Iterator)\\b"
      }]
    },
    "operators": {
      "patterns": [{
        "name": "keyword.operator.simula",
        "match": "\\b(and|or|not|in|is|as)\\b"
      }, {
        "name": "keyword.operator.arithmetic.simula",
        "match": "[+\\-*/%]|\\*\\*|//"
      }, {
        "name": "keyword.operator.comparison.simula",
        "match": "==|!=|<=|>=|<|>|<=>"
      }, {
        "name": "keyword.operator.assignment.simula",
        "match": "=|\\+=|\\-=|\\*=|/=|%=|\\*\\*=|//=|&=|\\|=|\\^=|<<=|>>="
      }, {
        "name": "keyword.operator.bitwise.simula",
        "match": "&|\\||\\^|~|<<|>>"
      }]
    },
    "functions": {
      "patterns": [{
        "name": "entity.name.function.simula",
        "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
      }]
    },
    "simulation": {
      "patterns": [{
        "name": "keyword.simulation.simula",
        "match": "\\b(simulate|model|entity|process|event|schedule|advance|hold|wait|activate|terminate|suspend|resume|priority|queue|resource|monitor|statistics|random|distribution|uniform|normal|exponential|poisson|binomial|geometric|weibull|gamma|beta|chi_square|student_t|fisher_f|erlang|lognormal|triangular|discrete|empirical)\\b"
      }]
    }
  }
} 